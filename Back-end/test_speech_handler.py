# /Back-end/test_speech_handler.py

import asyncio
from core.ai_models.speech_handler import SpeechHandler
import numpy as np # Library ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç, ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á
import wave # Library ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå WAV
import simpleaudio as sa # Library ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á (‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢ pip install simpleaudio)

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ---
async def main_test():
    print("--- Starting SpeechHandler Test ---")

    # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Instance ‡∏Ç‡∏≠‡∏á SpeechHandler
    # (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Whisper)
    handler = SpeechHandler(model_size="base")

    # --- Test Case 1: Text-to-Speech (TTS) ---
    print("\n--- Testing TTS: Text to Raw PCM Bytes ---")
    test_text = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î"
    try:
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        pcm_audio_bytes = handler.synthesize_speech_to_bytes(test_text)
        
        if pcm_audio_bytes:
            print(f"‚úÖ TTS Success! Generated {len(pcm_audio_bytes)} bytes of PCM data.")
            
            # --- ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ---
            print("üîä Playing synthesized audio...")
            # simpleaudio ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ sample_width, channels, frame_rate
            # 2 bytes = 16-bit, 1 channel = mono, 24000 = 24kHz
            wave_obj = sa.WaveObject(pcm_audio_bytes, 1, 2, 24000)
            play_obj = wave_obj.play()
            play_obj.wait_done() # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏ô‡∏à‡∏ö
            print("‚ñ∂Ô∏è Playback finished.")
            
        else:
            print("‚ùå TTS Failed! No audio data returned.")

    except Exception as e:
        print(f"‚ùå An error occurred during TTS test: {e}")


    # --- Test Case 2: Speech-to-Text (STT) ---
    print("\n--- Testing STT: Raw PCM Bytes to Text ---")
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á: ‡πÄ‡∏™‡∏µ‡∏¢‡∏á sine wave ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà 440Hz (‡∏ï‡∏±‡∏ß‡πÇ‡∏ô‡πâ‡∏ï A)
        # ‡∏ô‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Whisper ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        # Raw PCM data ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        sample_rate = 16000 # 16kHz
        duration = 2 # 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        frequency = 440
        t = np.linspace(0., duration, int(sample_rate * duration), endpoint=False)
        amplitude = np.iinfo(np.int16).max * 0.5
        data = amplitude * np.sin(2. * np.pi * frequency * t)
        
        # ‡πÅ‡∏õ‡∏•‡∏á Float64 (‡∏à‡∏≤‡∏Å numpy) ‡πÄ‡∏õ‡πá‡∏ô Int16 (2 bytes) ‡∏ó‡∏µ‡πà VAD/Whisper ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        simulated_pcm_bytes = data.astype(np.int16).tobytes()

        print(f"üî¨ Created simulated PCM audio ({len(simulated_pcm_bytes)} bytes).")

        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        transcribed_text = handler.transcribe_audio_bytes(simulated_pcm_bytes)
        
        # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: Whisper ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á sine wave ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏õ‡∏•‡∏Å‡πÜ
        # ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏Å‡∏ï‡∏¥! ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏Ñ‡∏∑‡∏≠ "‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏°‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏û‡∏±‡∏á"
        print(f"‚úÖ STT Processed without error! Transcription result: '{transcribed_text}'")
        print("(Note: Empty or strange text is expected for a sine wave test)")

    except Exception as e:
        print(f"‚ùå An error occurred during STT test: {e}")

    print("\n--- Test Finished ---")

# --- ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ---
if __name__ == "__main__":
    # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á library ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô
    print("Please make sure you have installed 'numpy' and 'simpleaudio'.")
    print("Run: pip install numpy simpleaudio")
    
    # ‡∏£‡∏±‡∏ô main_test function
    asyncio.run(main_test())