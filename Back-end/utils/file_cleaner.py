# /utils/file_cleaner.py

import os
import time
import schedule
import threading
from pathlib import Path

TEMP_AUDIO_DIR = Path(__file__).parent.parent / "temp_audio"

def setup_temp_audio_dir():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ"""
    TEMP_AUDIO_DIR.mkdir(exist_ok=True)
    print(f"‚úÖ Temporary audio directory is ready at: {TEMP_AUDIO_DIR}")

def delete_old_files(directory: Path, max_age_minutes: int = 5):
    """‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    print(f"üßπ Running cleanup job for '{directory}'...")
    cutoff_time = time.time() - (max_age_minutes * 60)
    files_deleted = 0
    for filepath in directory.iterdir():
        if filepath.is_file():
            try:
                file_mtime = filepath.stat().st_mtime
                if file_mtime < cutoff_time:
                    filepath.unlink()
                    files_deleted += 1
            except Exception as e:
                print(f"‚ùå Error deleting file {filepath}: {e}")
    if files_deleted > 0:
        print(f"üóëÔ∏è  Deleted {files_deleted} old audio file(s).")

def run_cleanup_scheduler():
    """‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ '‡∏†‡∏≤‡∏£‡πÇ‡∏£‡∏á' ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡πÜ 5 ‡∏ô‡∏≤‡∏ó‡∏µ"""
    schedule.every(5).minutes.do(delete_old_files, directory=TEMP_AUDIO_DIR, max_age_minutes=5)
    
    print("üï∞Ô∏è  File cleanup scheduler started. Will run every 5 minutes.")
    while True:
        schedule.run_pending()
        time.sleep(1)

def start_background_cleanup():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á '‡∏†‡∏≤‡∏£‡πÇ‡∏£‡∏á' ‡πÉ‡∏ô Background Thread"""
    setup_temp_audio_dir()
    cleanup_thread = threading.Thread(target=run_cleanup_scheduler, daemon=True)
    cleanup_thread.start()