import asyncio
import logging
from pathlib import Path
import time

# [V5.1] ‡∏¢‡πâ‡∏≤‡∏¢ Path ‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
TEMP_AUDIO_DIR = Path(__file__).parent.parent / "temp_audio"
CLEANUP_INTERVAL_SECONDS = 300 # 5 ‡∏ô‡∏≤‡∏ó‡∏µ (300 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
MAX_AGE_MINUTES = 5            # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 5 ‡∏ô‡∏≤‡∏ó‡∏µ

def setup_temp_audio_dir():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ OK)"""
    try:
        TEMP_AUDIO_DIR.mkdir(exist_ok=True)
        logging.info(f"‚úÖ Temporary audio directory is ready at: {TEMP_AUDIO_DIR}")
    except Exception as e:
        logging.error(f"‚ùå Failed to create temp audio dir: {e}")

# [V5.1] ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÅ‡∏¢‡∏Å Logic ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå (‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Sync I/O) ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
def _delete_old_files_sync() -> int:
    """
    (Sync Function) Logic ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏£‡∏±‡∏ô‡πÉ‡∏ô to_thread ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏•‡πá‡∏≠‡∏Å
    """
    logging.info(f"üßπ [CleanupTask] Running cleanup job for '{TEMP_AUDIO_DIR}'...")
    try:
        if not TEMP_AUDIO_DIR.is_dir():
            logging.warning(f"Cleanup skipped: Directory not found: {TEMP_AUDIO_DIR}")
            return 0
        
        cutoff_time = time.time() - (MAX_AGE_MINUTES * 60)
        files_deleted = 0
        
        # (Sync I/O: .iterdir(), .stat(), .unlink())
        for filepath in TEMP_AUDIO_DIR.iterdir():
            if filepath.is_file():
                try:
                    file_mtime = filepath.stat().st_mtime
                    if file_mtime < cutoff_time:
                        filepath.unlink()
                        files_deleted += 1
                except Exception as e:
                    logging.warning(f"‚ùå Error deleting file {filepath}: {e}")
                    
        if files_deleted > 0:
            logging.info(f"üóëÔ∏è  [CleanupTask] Deleted {files_deleted} old audio file(s).")
        else:
            logging.info(f"üßπ [CleanupTask] No old files to delete.")
            
        return files_deleted
        
    except Exception as e:
        logging.error(f"‚ùå [CleanupTask] Error during file iteration: {e}")
        return 0

# [V5.1] ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô "‡∏ï‡∏±‡∏ß‡∏à‡∏£‡∏¥‡∏á" ‡∏ó‡∏µ‡πà main.py ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å
async def start_background_cleanup():
    """
    (Async Coroutine) ‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ô‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤
    """
    setup_temp_audio_dir()
    logging.info(f"üï∞Ô∏è  [CleanupTask] Async file cleanup scheduler started. Will run every {CLEANUP_INTERVAL_SECONDS} seconds.")
    
    while True:
        try:
            # 1. "‡∏û‡∏±‡∏Å" ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Async (‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å Event Loop)
            await asyncio.sleep(CLEANUP_INTERVAL_SECONDS) 
            
            # 2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Logic ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå (‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Sync I/O)
            #    ‡πÇ‡∏î‡∏¢‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏£‡∏±‡∏ô‡πÉ‡∏ô Thread ‡πÅ‡∏¢‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            await asyncio.to_thread(_delete_old_files_sync)

        except asyncio.CancelledError:
            # (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô!) ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Server ‡∏™‡∏±‡πà‡∏á‡∏õ‡∏¥‡∏î (‡πÉ‡∏ô lifespan)
            logging.info("üõë [CleanupTask] File cleanup task cancelled.")
            break
        except Exception as e:
            # (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏ì‡∏µ Task ‡∏û‡∏±‡∏á)
            logging.error(f"‚ùå [CleanupTask] Error in cleanup loop: {e}", exc_info=True)
            # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏û‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
            await asyncio.sleep(60)